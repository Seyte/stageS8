# TODO: à mettre dans un fichier de test automatique
fsm = fromDot("./first_snippets/data/fsm5.dot")

result = fsm.deterministic_executions([Symbol('a'),Symbol('b')])
print(result)
#-------------------

stateToReach = fsm.getStates()[1]
print(find_paths_to_initial(stateToReach, fsm))
#-------------------
fsm = fromDot("./first_snippets/data/fsm5.dot")
phi = And(Symbol('t_1'), Not(Symbol('t_2')), Not(Symbol('t_3')), Symbol('t_0'))

M = create_automata_from_phi(fsm,phi)
print(fsm.toDot())
print(M.toDot()) 
#-------------------

    fsm = fromDot("./first_snippets/data/fsm6.dot")
    #phi1 & phi2 non & équivalent
    phi1 = And(Not(Symbol('t_0',BOOL)), Symbol('t_1',BOOL), Symbol('t_2',BOOL), Symbol('t_3',BOOL), Symbol('t_4',BOOL))
    phi2 = And(Symbol('t_0',BOOL), Not(Symbol('t_1',BOOL)), Symbol('t_2',BOOL), Symbol('t_3',BOOL), Symbol('t_4',BOOL))

    # ph3 & ph4 équivalent
    phi3 = And(Symbol('t_0',BOOL), Not(Symbol('t_1',BOOL)), Symbol('t_2',BOOL), Symbol('t_3',BOOL), Symbol('t_4',BOOL))
    phi4 = And(Symbol('t_0',BOOL), Symbol('t_1',BOOL), Symbol('t_2',BOOL), Symbol('t_3',BOOL), Not(Symbol('t_4',BOOL)))
    
    print("------------- phi1 & phi2 --------------")
    print( are_equivalent(fsm,phi1,phi2))
    print("------------- phi3 & phi4 --------------")
    print( are_equivalent(fsm,phi3,phi4))

    #-------------------
